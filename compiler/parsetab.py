
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDNANDORNORXORNXORrightNOTAND BIN EQUALS FALSE ID INT LBRACE LBRACKET LPAREN NAND NOR NOT NXOR OR RBRACE RBRACKET RPAREN TRUE XORstatement : ID EQUALS expressionstatement : expressionexpression : NOT expressionexpression : expression NAND expressionexpression : expression AND expressionexpression : expression NOR expressionexpression : expression OR expressionexpression : expression NXOR expressionexpression : expression XOR expressionexpression : LPAREN   expression RPAREN\n                  | LBRACE   expression RBRACE\n                  | LBRACKET expression RBRACKETexpression : BIN\n                  | INT\n                  | TRUE\n                  | FALSEexpression : IDexpression : expression AND\n                  | expression OR\n                  | expression XOR\n                  | expression NAND\n                  | expression NOR\n                  | expression NXOR'
    
_lr_action_items = {'ID':([0,4,5,6,7,12,13,14,15,16,17,18,],[2,20,20,20,20,20,20,20,20,20,20,20,]),'NOT':([0,4,5,6,7,12,13,14,15,16,17,18,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'LPAREN':([0,4,5,6,7,12,13,14,15,16,17,18,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'LBRACE':([0,4,5,6,7,12,13,14,15,16,17,18,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'LBRACKET':([0,4,5,6,7,12,13,14,15,16,17,18,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'BIN':([0,4,5,6,7,12,13,14,15,16,17,18,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'INT':([0,4,5,6,7,12,13,14,15,16,17,18,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'TRUE':([0,4,5,6,7,12,13,14,15,16,17,18,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'FALSE':([0,4,5,6,7,12,13,14,15,16,17,18,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'$end':([1,2,3,8,9,10,11,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,31,32,33,],[0,-17,-2,-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,-1,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'EQUALS':([2,],[12,]),'NAND':([2,3,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[-17,13,-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,13,13,13,13,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'AND':([2,3,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[-17,14,-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,14,14,14,14,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'NOR':([2,3,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[-17,15,-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,15,15,15,15,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'OR':([2,3,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[-17,16,-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,16,16,16,16,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'NXOR':([2,3,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[-17,17,-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,17,17,17,17,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'XOR':([2,3,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[-17,18,-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,18,18,18,18,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'RPAREN':([8,9,10,11,13,14,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32,33,],[-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,31,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'RBRACE':([8,9,10,11,13,14,15,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,],[-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,32,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'RBRACKET':([8,9,10,11,13,14,15,16,17,18,19,20,23,25,26,27,28,29,30,31,32,33,],[-13,-14,-15,-16,-21,-18,-22,-19,-23,-20,-3,-17,33,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,6,7,12,13,14,15,16,17,18,],[3,19,21,22,23,24,25,26,27,28,29,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID EQUALS expression','statement',3,'p_statement_assign','parseply.py',31),
  ('statement -> expression','statement',1,'p_statement_expr','parseply.py',46),
  ('expression -> NOT expression','expression',2,'p_expression_not','parseply.py',51),
  ('expression -> expression NAND expression','expression',3,'p_expression_nand','parseply.py',56),
  ('expression -> expression AND expression','expression',3,'p_expression_and','parseply.py',61),
  ('expression -> expression NOR expression','expression',3,'p_expression_nor','parseply.py',66),
  ('expression -> expression OR expression','expression',3,'p_expression_or','parseply.py',71),
  ('expression -> expression NXOR expression','expression',3,'p_expression_nxor','parseply.py',76),
  ('expression -> expression XOR expression','expression',3,'p_expression_xor','parseply.py',81),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parseply.py',86),
  ('expression -> LBRACE expression RBRACE','expression',3,'p_expression_group','parseply.py',87),
  ('expression -> LBRACKET expression RBRACKET','expression',3,'p_expression_group','parseply.py',88),
  ('expression -> BIN','expression',1,'p_expression_literal','parseply.py',93),
  ('expression -> INT','expression',1,'p_expression_literal','parseply.py',94),
  ('expression -> TRUE','expression',1,'p_expression_literal','parseply.py',95),
  ('expression -> FALSE','expression',1,'p_expression_literal','parseply.py',96),
  ('expression -> ID','expression',1,'p_expression_id','parseply.py',101),
  ('expression -> expression AND','expression',2,'p_expression_broken','parseply.py',111),
  ('expression -> expression OR','expression',2,'p_expression_broken','parseply.py',112),
  ('expression -> expression XOR','expression',2,'p_expression_broken','parseply.py',113),
  ('expression -> expression NAND','expression',2,'p_expression_broken','parseply.py',114),
  ('expression -> expression NOR','expression',2,'p_expression_broken','parseply.py',115),
  ('expression -> expression NXOR','expression',2,'p_expression_broken','parseply.py',116),
]
